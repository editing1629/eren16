def fifo(pages, frames_count):
    frames = []
    page_faults = 0

    print("\n--- FIFO Page Replacement ---")
    for page in pages:
        if page not in frames:
            if len(frames) < frames_count:
                frames.append(page)
            else:
                frames.pop(0)  
                frames.append(page)
            page_faults += 1

        print(f"Page {page} → Frames: {frames}")

    print(f"\nTotal Page Faults (FIFO): {page_faults}\n")


def lru(pages, frames_count):
    frames = []
    page_faults = 0
    recent = {}

    print("\n--- LRU Page Replacement ---")
    for i, page in enumerate(pages):
        if page not in frames:
            if len(frames) < frames_count:
                frames.append(page)
            else:
                
                lru_page = min(recent, key=recent.get)
                if lru_page in frames:  
                    frames.remove(lru_page)
                frames.append(page)
            page_faults += 1
        recent[page] = i  

        print(f"Page {page} → Frames: {frames}")

    print(f"\nTotal Page Faults (LRU): {page_faults}\n")



def optimal(pages, frames_count):
    frames = []
    page_faults = 0

    print("\n--- Optimal Page Replacement ---")
    for i in range(len(pages)):
        page = pages[i]
        if page not in frames:
            if len(frames) < frames_count:
                frames.append(page)
            else:
               
                future_use = []
                for f in frames:
                    if f in pages[i+1:]:
                        future_use.append(pages[i+1:].index(f))
                    else:
                        future_use.append(float('inf'))

                replace_index = future_use.index(max(future_use))
                frames[replace_index] = page
            page_faults += 1

        print(f"Page {page} → Frames: {frames}")

    print(f"\nTotal Page Faults (Optimal): {page_faults}\n")



print("Page Replacement Algorithm Simulation")
print("1. FIFO\n2. LRU\n3. Optimal")

choice = int(input("Enter your choice (1-3): "))
pages = list(map(int, input("Enter the page reference string (space separated): ").split()))
frames_count = int(input("Enter number of frames: "))

if choice == 1:
    fifo(pages, frames_count)
elif choice == 2:
    lru(pages, frames_count)
elif choice == 3:
    optimal(pages, frames_count)
else:
    print("Invalid choice!")


