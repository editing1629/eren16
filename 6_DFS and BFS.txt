#include <iostream> 
#include <stack> 
#include <queue> 
using namespace std; 
class node { 
public: 
int data; 
node *next; 
}; 
class Graph { 
public: 
stack<node*> st; 
queue<node*> qu; 
node *head[20]; 
int no, visited[20]; 
void AdjacencyList(); 
void insertEdge(int, int); 
void DFS(int); 
void BFS(int); 
}; 
void Graph::AdjacencyList() { 
int i; 
node *f; 
for (i = 0; i < no; i++) { 
cout << "Vertex " << i << " -> "; 
f = head[i]; 
while (f) { 
cout << f->data << " "; 
f = f->next; 
} 
cout << endl; 
} 
} 
void Graph::insertEdge(int v1, int v2) { 
node *n, *f, *h; 
// creating link from v1 to v2 
h = new node; 
h->data = v1; 
h->next = NULL; 
n = new node;          
n->data = v2;          
n->next = NULL;        
f = head[v1];          
if (f == NULL) { 
        h->next = n; 
        head[v1] = h; 
    } else { 
        while (f->next) 
            f = f->next; 
        f->next = n; 
    } 
 
    // Create reverse link for undirected graph (v2 -> v1) 
    h = new node; 
    h->data = v2; 
    h->next = NULL; 
 
    n = new node; 
    n->data = v1; 
    n->next = NULL; 
 
    f = head[v2]; 
 
    if (f == NULL) { 
        h->next = n; 
        head[v2] = h; 
    } else { 
        while (f->next) 
            f = f->next; 
        f->next = n; 
    } 
} 
 
void Graph::DFS(int v) { 
    node *vNode, *f; 
    st.push(head[v]); 
    visited[v] = 1; 
    cout << "\nDFS Traversal starting from vertex " << v << ": "; 
 
    while (!st.empty()) { 
        f = st.top(); 
        st.pop(); 
 
        if (f != nullptr && visited[f->data] == 0) { 
            cout << f->data << " "; 
            visited[f->data] = 1; 
        } 
 
        vNode = head[f->data]; 
        while (vNode) { 
            if (visited[vNode->data] == 0) { 
                st.push(vNode); 
            } 
            vNode = vNode->next; 
        } 
    } 
} 
 
void Graph::BFS(int v) { 
    node *vNode, *f; 
    qu.push(head[v]); 
    visited[v] = 1; 
    cout << "\nBFS Traversal starting from vertex " << v << ": "; 
 
    while (!qu.empty()) { 
        f = qu.front(); 
        qu.pop(); 
 
        if (f != nullptr && visited[f->data] == 0) { 
            cout << f->data << " "; 
            visited[f->data] = 1; 
        } 
 
        vNode = head[f->data]; 
        while (vNode) { 
            if (visited[vNode->data] == 0) { 
                qu.push(vNode); 
            } 
            vNode = vNode->next; 
        } 
    } 
} 
 
int main() { 
    Graph g; 
    int v, v1, v2; 
    char ch; 
    cout << "\nEnter the number of vertices in the graph: "; 
    cin >> g.no; 
 
    // Initialize head and visited arrays 
    for (int i = 0; i < g.no; i++) { 
        g.head[i] = NULL; 
        g.visited[i] = 0; 
    } 
 
    cout << "\nNow you have to enter the vertices of edges"; 
    cout << "\nThe vertices are labeled as 0 to " << g.no - 1 << endl; 
    do { 
        cout << "\nEnter edge (V1, V2): "; 
        cin >> v1 >> v2; 
        g.insertEdge(v1, v2); 
        cout << "\nDo you want more edges (y/n): "; 
        cin >> ch; 
    } while (ch == 'y'); 
 
    cout << "\nThe adjacency list of the graph is:\n"; 
    g.AdjacencyList(); 
cout << "\nEnter the first vertex of the graph for DFS: "; 
cin >> v; 
for (int i = 0; i < g.no; i++) g.visited[i] = 0; // Reset visited array before DFS 
g.DFS(v); 
cout << "\nEnter the first vertex of the graph for BFS: "; 
cin >> v; 
for (int i = 0; i < g.no; i++) g.visited[i] = 0; // Reset visited array before BFS 
g.BFS(v); 
cout << endl; 
return 0; 
} 