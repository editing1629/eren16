#include<stdio.h>
#include<stdlib.h>
#include<string.h>


struct Sym_Tab
{
	char symbol[10];
	int val;
};


struct Literal_Table
{
	char literal[10];
	int val;
};

int main ()
{
	FILE *f1;
	struct Sym_Tab ST[20];
	struct Literal_Table LT[10];
	int i,j;
	int LC, ltc = 0, stc = 0;
	char label[20], opcode[20], operand[20];

	
	for(i = 0; i<10; i++)
		LT[i].val = -1;
	
	f1=fopen("Assembly_Program3.txt","r");	
	fscanf(f1,"%s%s%s",label, opcode, operand);

	printf("\n The Source Program is");
	printf("\n ------------------------------------------- ");
	printf("\n Label\tOpcode\tOperand");
	printf("\n -------------------------------------------\n ");
	while(strcmp(opcode, "END") != 0)
	{
		printf("\n %s \t%s \t%s",label, opcode, operand);
		
		i = 0;
		while(operand[i] != '\0')
		{
			if(operand[i] == '=')
			{
				j = 0;
				while(operand[i] != '\0')
					LT[ltc].literal[j++] = operand[i++];	
				LT[ltc].literal[j] = '\0';
				ltc++;
			}
			else
				i++;
		}
		if(strcmp(opcode, "START") == 0)
		{
			if(strcmp(operand, "-") != 0)
				LC = atoi(operand)-1;
			else
				LC = -1;
		}
		if(strcmp(opcode, "EQU") == 0)
		{
			strcpy(ST[stc].symbol, label);
			ST[stc].val = atoi(operand);
			stc++;
			LC--;
		}
		else if(strcmp(label, "-") !=0)
		{
			strcpy(ST[stc].symbol, label);
			ST[stc].val = LC;
			stc++;
		}
		if(strcmp(opcode, "ORIGIN") == 0)
		{
			LC = atoi(operand)-1;
		}
		
		if(strcmp(opcode, "LTORG") == 0)
		{
			for(i = 0; i<ltc; i++)
			{
				LT[i].val = LC;	
				LC++;
			}
		}
		LC++;
		fscanf(f1,"%s%s%s",label, opcode, operand);
	}
	fclose(f1);
	for(i = 0; i<ltc; i++)
	{
		if(LT[i].val == -1)
		{
			LT[i].val = LC;	
			LC++;
		}
	}	
	printf("\n The Symbol Table is ");
	printf("\n ------------------------------------------- ");
	printf("\nSymbol\tAddress");
	printf("\n -------------------------------------------\n");
	for(i = 0; i<stc; i++)
		printf( "%s\t%d\n",ST[i].symbol,ST[i].val);

	printf("\n The Literal Table is ");
	printf("\n ------------------------------------------- ");
	printf("\nLiteral\tAddress");
	printf("\n -------------------------------------------\n");
	for(i = 0; i<ltc; i++)
		printf("%s \t %d \n",LT[i].literal, LT[i].val);
	printf("\n");
}



create new file-Assembly_Program3

-	START	200
-	MOVER	AREG,='5'
-	MOVEM	AREG,A
LOOP	MOVER	AREG,A
-	MOVER	CREG,B
-	ADD	CREG,='1'
-	BC	ANY,NEXT
-	LTORG	-
NEXT	SUB	AREG,='1'
-	BC	LT,BACK
LAST	STOP	-
-	ORIGIN	204
-	MULT	CREG,B
-	ORIGIN	217
A	DS	1
BACK	EQU	202
B	DS	1
-	END	-
