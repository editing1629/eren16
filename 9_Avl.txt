#include<iostream>
#include<string.h>
#include<stdlib.h>
using namespace std;

class node {
public:
    int data;
    int bal;
    node *left;
    node *right;
};

class Tree {
public:
    node *insert(node *, node *);
    node *rotateRight(node *);
    node *rotateLeft(node *);
    void inorder(node *);
};

void Tree::inorder(node* root) {
    if (root) {
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}

node *Tree::insert(node *root, node *s) {
    if (s->data > root->data) {
        if (root->right == NULL)
            root->right = s;
        else
            root->right = insert(root->right, s);
    }

    if (s->data <= root->data) {
        if (root->left == NULL)
            root->left = s;
        else
            root->left = insert(root->left, s);
    }

    if (root->left == NULL && root->right != NULL)
        root->bal = -1;
    else if (root->left != NULL && root->right == NULL)
        root->bal = 1;
    else
        root->bal = 0;

    if (root->bal == 1 && root->left->bal == 1)
        root = rotateRight(root);

    if (root->bal == -1 && root->right->bal == -1)
        root = rotateLeft(root);

    if (root->bal == 1 && root->left->bal == -1) {
        root->left = rotateLeft(root->left);
        root = rotateRight(root);
    }

    if (root->bal == -1 && root->right->bal == 1) {
        root->right = rotateRight(root->right);
        root = rotateLeft(root);
    }

    return root;
}

node *Tree::rotateRight(node *root) {
    node *temp;
    temp = root->left;
    root->left = temp->right;
    temp->right = root;
    return temp;
}

node *Tree::rotateLeft(node *root) {
    node *temp;
    temp = root->right;
    root->right = temp->left;
    temp->left = root;
    return temp;
}

int main() {
    int ch, c;
    char temp;
    node *root, *s;
    Tree t;
    root = new node;
    root = NULL;

    do {
        s = new node;
        s->bal = 0;
        s->left = NULL;
        s->right = NULL;
        cout << "\nEnter node of tree::";
        cin >> s->data;

        if (root == NULL)
            root = s;
        else
            root = t.insert(root, s);

        cout << "\n\nInorder Sequence of Tree is :\n\n";
        t.inorder(root);
        cout << "\n";

        cout << "\nWANT TO ENTER MORE ELEMENTS(y/n)::";
        cin >> temp;
    } while (temp == 'y');

    cout << endl;
    return 0;
}
