#include <iostream>
#include <stack>
#include <cstring>

using namespace std;

class node {
public:
    char data;
    int flag;
    node* left;
    node* right;

    node(char value) {
        data = value;
        left = right = nullptr;
        flag = 0;
    }
};

class Tree {
public:
    stack<node*> st;

    bool isOperator(char c) {
        return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
    }

    node* constructTree(string prefix) {
        for (int i = prefix.length() - 1; i >= 0; i--) {
            if (!isOperator(prefix[i])) {
                st.push(new node(prefix[i]));
            } else {
                node* t = new node(prefix[i]);
                t->left = st.top();
                st.pop();
                t->right = st.top();
                st.pop();
                st.push(t);
            }
        }
        return st.top();
    }

    void Postorder(node* root) {
        stack<node*> s1, s2;
        s1.push(root);
        
        while (!s1.empty()) {
            node* temp = s1.top();
            s1.pop();
            s2.push(temp);

            if (temp->left) s1.push(temp->left);
            if (temp->right) s1.push(temp->right);
        }

        while (!s2.empty()) {
            cout << s2.top()->data << " ";
            s2.pop();
        }
    }

    void deleteTree(node* root) {
        if (!root) return;
        deleteTree(root->left);
        deleteTree(root->right);
        delete root;
    }
};

int main() {
    Tree expressionTree;
    string prefix;

    cout << "Enter the Prefix Expression: ";
    cin >> prefix;

    node* root = expressionTree.constructTree(prefix);

    cout << "Postorder Traversal (Non-Recursive): ";
    expressionTree.Postorder(root);
    cout << endl;

    expressionTree.deleteTree(root);

    return 0;
}
