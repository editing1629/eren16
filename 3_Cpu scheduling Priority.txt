     Priority.py

def priority_scheduling(processes, priorities, burst_times):
    n = len(processes)
   
    
    proc_info = list(zip(processes, priorities, burst_times))
   
    
    proc_info.sort(key=lambda x: x[1])
   
    waiting_time = [0] * n
    turnaround_time = [0] * n
   
    
    for i in range(1, n):
        waiting_time[i] = waiting_time[i-1] + proc_info[i-1][2]
       
    
    for i in range(n):
        turnaround_time[i] = waiting_time[i] + proc_info[i][2]
       
    
    print("Process\tPriority\tBurst Time\tWaiting Time\tTurnaround Time")
    for i in range(n):
        print(f"{proc_info[i][0]}\t{proc_info[i][1]}\t\t{proc_info[i][2]}\t\t{waiting_time[i]}\t\t{turnaround_time[i]}")
   
    avg_waiting_time = sum(waiting_time) / n
    avg_turnaround_time = sum(turnaround_time) / n
   
    print(f"\nAverage Waiting Time: {avg_waiting_time:.2f}")
    print(f"Average Turnaround Time: {avg_turnaround_time:.2f}")


processes = ['P1', 'P2', 'P3', 'P4']
priorities = [2, 1, 4, 3]  
burst_times = [3, 6, 4, 5]

priority_scheduling(processes, priorities, burst_times)

              
             Robin

def round_robin(processes, burst_times, time_quantum):
    n = len(processes)
    rem_bt = burst_times.copy()  
   
    waiting_time = [0] * n
    turnaround_time = [0] * n
    t = 0  
   
    
    while True:
        done = True
       
        for i in range(n):
            
            if rem_bt[i] > 0:
                done = False  
               
                
                if rem_bt[i] > time_quantum:
                    t += time_quantum
                    rem_bt[i] -= time_quantum
                else:
                    
                    t += rem_bt[i]
                    waiting_time[i] = t - burst_times[i]
                    rem_bt[i] = 0
       
        if done:
            break
   
    
    for i in range(n):
        turnaround_time[i] = burst_times[i] + waiting_time[i]
   
    
    print("Process\tBurst Time\tWaiting Time\tTurnaround Time")
    for i in range(n):
        print(f"{processes[i]}\t{burst_times[i]}\t\t{waiting_time[i]}\t\t{turnaround_time[i]}")
   
    print(f"\nAverage Waiting Time: {sum(waiting_time)/n:.2f}")
    print(f"Average Turnaround Time: {sum(turnaround_time)/n:.2f}")


processes = ['P1', 'P2', 'P3', 'P4']
burst_times = [10, 5, 8, 6]
time_quantum = 3

round_robin(processes, burst_times, time_quantum)


             SJF.cpp

#include <stdio.h>

#define MAX 10

typedef struct {
    int id;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
    int finish_time;
    int completed;
} Process;

void calculate_sjf(Process processes[], int n) {
    int completed = 0, current_time = 0;
    int total_waiting_time = 0, total_turnaround_time = 0;

    while (completed < n) {
        int idx = -1;
        int min_burst = 1e9;

        
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && !processes[i].completed) {
                if (processes[i].burst_time < min_burst) {
                    min_burst = processes[i].burst_time;
                    idx = i;
                }
                
                else if (processes[i].burst_time == min_burst) {
                    if (processes[i].arrival_time < processes[idx].arrival_time)
                        idx = i;
                }
            }
        }

        if (idx == -1) {
            current_time++; 
        } else {
            processes[idx].finish_time = current_time + processes[idx].burst_time;
            processes[idx].turnaround_time = processes[idx].finish_time - processes[idx].arrival_time;
            processes[idx].waiting_time = processes[idx].turnaround_time - processes[idx].burst_time;

            current_time = processes[idx].finish_time;
            processes[idx].completed = 1;
            completed++;

            total_waiting_time += processes[idx].waiting_time;
            total_turnaround_time += processes[idx].turnaround_time;
        }
    }

    printf("\nProcess ID\tArrival Time\tBurst Time\tFinish Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
            processes[i].id,
            processes[i].arrival_time,
            processes[i].burst_time,
            processes[i].finish_time,
            processes[i].turnaround_time,
            processes[i].waiting_time);
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    Process processes[MAX];

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].id = i + 1;
        processes[i].waiting_time = 0;
        processes[i].turnaround_time = 0;
        processes[i].finish_time = 0;
        processes[i].completed = 0;
    }

    calculate_sjf(processes, n);

    return 0;
}



