class Record:
    def __init__(self, name, number):
        self.name = name
        self.number = number

    def __str__(self):
        return f"{self.name} : {self.number}"


class HashTable:
    def __init__(self, size):
        self.size = size
        self.table = [None] * size
        self.comparisons = 0

    def hash(self, key):
        return key % self.size

    def linear_probing_insert(self, record):
        key = self.hash(record.number)
        for i in range(self.size):
            pos = (key + i) % self.size
            if self.table[pos] is None:
                self.table[pos] = record
                print(f"Inserted at position {pos}")
                return
        print("Hash table full! Cannot insert.")

    def linear_probing_search(self, number):
        key = self.hash(number)
        self.comparisons = 0
        for i in range(self.size):
            pos = (key + i) % self.size
            self.comparisons += 1
            if self.table[pos] and self.table[pos].number == number:
                print(f"Found at position {pos} in {self.comparisons} comparisons")
                return
            if self.table[pos] is None:
                break
        print("Not found.")

    def quadratic_probing_insert(self, record):
        key = self.hash(record.number)
        for i in range(self.size):
            pos = (key + i * i) % self.size
            if self.table[pos] is None:
                self.table[pos] = record
                print(f"Inserted at position {pos}")
                return
        print("Hash table full! Cannot insert.")

    def quadratic_probing_search(self, number):
        key = self.hash(number)
        self.comparisons = 0
        for i in range(self.size):
            pos = (key + i * i) % self.size
            self.comparisons += 1
            if self.table[pos] and self.table[pos].number == number:
                print(f"Found at position {pos} in {self.comparisons} comparisons")
                return
            if self.table[pos] is None:
                break
        print("Not found.")

    def display(self):
        for i in range(self.size):
            print(f"{i}: {self.table[i]}")
        print()


def main():
    size = int(input("Enter size of hash table: "))
    linear_table = HashTable(size)
    quad_table = HashTable(size)

    while True:
        print("\n1. Insert (Linear Probing)")
        print("2. Search (Linear Probing)")
        print("3. Insert (Quadratic Probing)")
        print("4. Search (Quadratic Probing)")
        print("5. Display Tables")
        print("6. Exit")

        ch = int(input("Enter choice: "))

        if ch in [1, 3]:
            name = input("Enter Name: ")
            number = int(input("Enter Phone Number: "))
            record = Record(name, number)
            if ch == 1:
                linear_table.linear_probing_insert(record)
            else:
                quad_table.quadratic_probing_insert(record)

        elif ch == 2:
            number = int(input("Enter Phone Number to Search: "))
            linear_table.linear_probing_search(number)

        elif ch == 4:
            number = int(input("Enter Phone Number to Search: "))
            quad_table.quadratic_probing_search(number)

        elif ch == 5:
            print("\nLinear Probing Table:")
            linear_table.display()
            print("Quadratic Probing Table:")
            quad_table.display()

        elif ch == 6:
            break
        else:
            print("Invalid choice")


if __name__ == "__main__":
    main()
